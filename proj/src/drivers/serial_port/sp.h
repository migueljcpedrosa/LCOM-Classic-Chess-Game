#ifndef _SERIAL_PORT_
#define _SERIAL_PORT_

#include <lcom/lcf.h>
#include "sp_data_queue.h"

#define COM1_BASE_REGISTER 0x3F8

#define RECEIVER_BUFFER_REGISTER 0x00
#define TRANSMITTER_HOLDING_REGISTER 0x00
#define INTERRUPT_ENABLE_REGISTER 0x01
#define INTERRUPT_IDENTIFICATION_REGISTER 0x02
#define FIFO_CONTROL_REGISTER 0x02
#define LINE_CONTROL_REGISTER 0x03
#define MODEM_CONTROL_REGISTER 0x04
#define LINE_STATUS_REGISTER 0x05
#define MODEM_STATUS_REGISTER 0x06
#define SCRATCHPAD_REGISTER 0x07

#define DIVISOR_LATCH_LSB 0x00
#define DIVISOR_LATCH_MSB 0x01

#define LINE_STATUS_DATA_READY BIT(0)
#define LINE_STATUS_OVERRUN_ERROR BIT(1)
#define LINE_STATUS_PARITY_ERROR BIT(2)
#define LINE_STATUS_FRAMING_ERROR BIT(3)
#define LINE_STATUS_BREAK_INTERRUPT BIT(4)
#define LINE_STATUS_THR_EMPTY BIT(5)
#define LINE_STATUS_TRANSMITTER_EMPTY BIT(6)
#define LINE_STATUS_RECEIVER_FIFO_ERROR BIT(7)

#define INTERRUPT_ENABLE_RECEIVER_DATA_AVAILABLE BIT(0)
#define INTERRUPT_ENABLE_TRANSMITTER_EMPTY BIT(1)
#define INTERRUPT_ENABLE_LINE_STATUS BIT(2)
#define INTERRUPT_ENABLE_MODEM_STATUS BIT(3)

#define INTERRUPT_IDENTIFICATION_NO_INTERRUPT_PENDING BIT(0)
#define INTERRUPT_IDENTIFICATION_ID BIT(1) | BIT(2) | BIT(3)
#define INTERRUPT_IDENTIFICATION_ORIGIN_LINE_STATUS BIT(1) | BIT(2)
#define INTERRUPT_IDENTIFICATION_ORIGIN_RECEIVED_DATA_AVAILABLE BIT(2)
#define INTERRUPT_IDENTIFICATION_FIFO_CONTROL BIT(3) | BIT(2)
#define INTERRUPT_IDENTIFICATION_ORIGIN_TRANSMITTER_EMPTY BIT(1)
#define INTERRUPT_IDENTIFICATION_INTERRUPT_PENDING 0x00

#define FIFO_CONTROL_CLEAR BIT(0) | BIT(1) | BIT(2)


/**
 * @brief Initializes the serial port by setting up the necessary parameters.
 *
 * This function initializes the serial port by enabling the interrupt for the Received Data Available (RDA) event,
 * initializing the input queue, and preparing the serial port for communication.
 *
 * @return Returns 0 on success, 1 otherwise.
 */
int serial_port_initialize(); //sets up the uart

/**
 * @brief Subscribes to serial port interrupts.
 *
 * This function subscribes to the interrupts generated by the serial port, allowing the system to receive
 * notifications when specific events occur, such as the availability of data or the readiness of the transmitter.
 *
 * @param sp_bit_no Pointer to store the bit number.
 * @return Returns 0 on success, 1 otherwise.
 */
int serial_port_subscribe_int(uint8_t* bit_no);

/**
 * @brief Unsubscribes from serial port interrupts.
 *
 * This function unsubscribes from the interrupts generated by the serial port, stopping the system from
 * receiving further notifications.
 *
 * @return Returns 0 on success, 1 otherwise.
 */
int serial_port_unsubscribe_int();

/**
 * @brief Gets the status of the serial port.
 *
 * This function retrieves the status of the serial port, providing information about the current state of the port,
 * such as the availability of data, transmitter readiness, and any error conditions.
 *
 * @param status Pointer to store the status value.
 * @return Returns 0 on success, 1 otherwise.
 */
int serial_port_get_status(uint8_t* interrupt_identification_register);


/**
 * @brief Cleans up resources used by the serial port.
 *
 * This function cleans up any resources used by the serial port, ensuring proper termination and freeing any allocated memory.
 */
void serial_port_exit();

/**
 * @brief Interrupt handler for the serial port.
 *
 * This function is called when an interrupt is triggered by the serial port. It handles the interrupt and performs
 * the necessary actions based on the specific interrupt event, such as reading data from the port and storing it
 * in the input queue for further processing.
 */
void serial_port_interrupt_handler();

/**
 * @brief Clears the serial port interrupts.
 *
 * This function clears any pending interrupts in the serial port, ensuring that the interrupt status is reset
 * and the port is ready for further communication.
 *
 * @return Returns 0 on success, 1 otherwise.
 */
int serial_port_clear_interrupts();

/**
 * @brief Reads a byte from the serial port.
 *
 * This function reads a byte from the serial port, retrieving data that has been received and stored in the port's buffer.
 * The received byte is stored in the input queue for further processing.
 *
 * @return Returns 0 on success, 1 otherwise.
 */
int serial_port_read_byte();

/**
 * @brief Sends a byte to the serial port for transmission.
 *
 * This function sends a byte of data to the serial port for transmission. It checks the status of the transmitter to ensure
 * it is ready before sending the data. If the transmitter is not ready, it retries a limited number of times before giving up.
 *
 * @param byte_to_send The byte to be sent.
 * @return Returns 0 on success, 1 otherwise.
 */
int serial_port_send_byte(uint8_t byte_to_send);

/**
 * @brief Returns the input queue of the serial port.
 *
 * This function returns a pointer to the input queue associated with the serial port. The input queue is used to store
 * received data from the serial port for further processing by the application.
 *
 * @return Pointer to the input queue.
 */
DataQueue* serial_port_get_input_queue();
#endif
